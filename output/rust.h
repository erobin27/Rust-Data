#pragma once
#include <cstdint>

// Offsets updated by: https://github.com/erobin27/Rust-Data

namespace RustOffsets {
	inline constexpr ::std::ptrdiff_t BaseEntity_TypeInfo = 0x3aceda0; // BaseEntity_TypeInfo
	inline constexpr ::std::ptrdiff_t Facepunch_Input_TypeInfo = 0x3aa3bc0; // Facepunch_Input_TypeInfo
	inline constexpr ::std::ptrdiff_t MainCamera_TypeInfo = 0x3ab9e00; // MainCamera_TypeInfo
	inline constexpr ::std::ptrdiff_t System_Collections_Generic_List_BaseGameMode__TypeInfo = 0x3affe78; // System_Collections_Generic_List_BaseGameMode__TypeInfo
	inline constexpr ::std::ptrdiff_t BaseGameMode_TypeInfo = 0x3acf008; // BaseGameMode_TypeInfo
	namespace BasePlayer {
		inline constexpr ::std::ptrdiff_t __menuOption_Climb = 0x290; // __menuOption_Climb
		inline constexpr ::std::ptrdiff_t __menuOption_Drink = 0x310; // __menuOption_Drink
		inline constexpr ::std::ptrdiff_t __menuOption_InviteToClan = 0x390; // __menuOption_InviteToClan
		inline constexpr ::std::ptrdiff_t __menuOption_InviteToTeam = 0x410; // __menuOption_InviteToTeam
		inline constexpr ::std::ptrdiff_t __menuOption_Menu_AssistPlayer = 0x490; // __menuOption_Menu_AssistPlayer
		inline constexpr ::std::ptrdiff_t __menuOption_Menu_LootPlayer = 0x510; // __menuOption_Menu_LootPlayer
		inline constexpr ::std::ptrdiff_t __menuOption_Promote = 0x590; // __menuOption_Promote
		inline constexpr ::std::ptrdiff_t __menuOption_SaltWater = 0x610; // __menuOption_SaltWater
		inline constexpr ::std::ptrdiff_t clanId = 0x690; // clanId
		inline constexpr ::std::ptrdiff_t playerModel = 0x698; // playerModel
		inline constexpr ::std::ptrdiff_t Frozen = 0x6A0; // Frozen
		inline constexpr ::std::ptrdiff_t LookLocked = 0x6A1; // LookLocked
		inline constexpr ::std::ptrdiff_t voiceRecorder = 0x6A8; // voiceRecorder
		inline constexpr ::std::ptrdiff_t voiceSpeaker = 0x6B0; // voiceSpeaker
		inline constexpr ::std::ptrdiff_t input = 0x6B8; // input
		inline constexpr ::std::ptrdiff_t movement = 0x6C0; // movement
		inline constexpr ::std::ptrdiff_t collision = 0x6C8; // collision
		inline constexpr ::std::ptrdiff_t bagCount = 0x6D0; // bagCount
		inline constexpr ::std::ptrdiff_t shelterCount = 0x6D4; // shelterCount
		inline constexpr ::std::ptrdiff_t modelInitUnderwear = 0x6D8; // modelInitUnderwear
		inline constexpr ::std::ptrdiff_t _lookingAt = 0x6E0; // _lookingAt
		inline constexpr ::std::ptrdiff_t _lookingAtEntity = 0x6E8; // _lookingAtEntity
		inline constexpr ::std::ptrdiff_t _lookingAtCollider = 0x6F0; // _lookingAtCollider
		inline constexpr ::std::ptrdiff_t lookingAtPoint = 0x6F8; // lookingAtPoint
		inline constexpr ::std::ptrdiff_t wakeTime = 0x704; // wakeTime
		inline constexpr ::std::ptrdiff_t needsClothesRebuild = 0x708; // needsClothesRebuild
		inline constexpr ::std::ptrdiff_t wasSleeping = 0x709; // wasSleeping
		inline constexpr ::std::ptrdiff_t wokeUpBefore = 0x70A; // wokeUpBefore
		inline constexpr ::std::ptrdiff_t wasDead = 0x70B; // wasDead
		inline constexpr ::std::ptrdiff_t HasMountedClothing = 0x70C; // HasMountedClothing
		inline constexpr ::std::ptrdiff_t HasWearableClothing = 0x70D; // HasWearableClothing
		inline constexpr ::std::ptrdiff_t lastClothesHash = 0x710; // lastClothesHash
		inline constexpr ::std::ptrdiff_t lastOpenSoundPlay = 0x714; // lastOpenSoundPlay
		inline constexpr ::std::ptrdiff_t currentViewMode = 0x718; // currentViewMode
		inline constexpr ::std::ptrdiff_t selectedViewMode = 0x71C; // selectedViewMode
		inline constexpr ::std::ptrdiff_t lastRevivePoint = 0x720; // lastRevivePoint
		inline constexpr ::std::ptrdiff_t lastReviveDirection = 0x72C; // lastReviveDirection
		inline constexpr ::std::ptrdiff_t IsWearingDiveGoggles = 0x738; // IsWearingDiveGoggles
		inline constexpr ::std::ptrdiff_t GestureViewModel = 0x740; // GestureViewModel
		inline constexpr ::std::ptrdiff_t currentClientRespawnInformation = 0x748; // currentClientRespawnInformation
		inline constexpr ::std::ptrdiff_t respawnOptionsTimestamp = 0x750; // respawnOptionsTimestamp
		inline constexpr ::std::ptrdiff_t lastParachuteRequest = 0x754; // lastParachuteRequest
		inline constexpr ::std::ptrdiff_t timeSinceUpdatedLookingAt = 0x758; // timeSinceUpdatedLookingAt
		inline constexpr ::std::ptrdiff_t nextTopologyTestTime = 0x75C; // nextTopologyTestTime
		inline constexpr ::std::ptrdiff_t usePressTime = 0x760; // usePressTime
		inline constexpr ::std::ptrdiff_t useHeldTime = 0x764; // useHeldTime
		inline constexpr ::std::ptrdiff_t lookingAtTest = 0x768; // lookingAtTest
		inline constexpr ::std::ptrdiff_t cachedWaterDrinkingPoint = 0x770; // cachedWaterDrinkingPoint
		inline constexpr ::std::ptrdiff_t hasRequestedServerEmoji = 0x77C; // hasRequestedServerEmoji
		inline constexpr ::std::ptrdiff_t gestureList = 0x790; // gestureList
		inline constexpr ::std::ptrdiff_t gestureFinishedTime = 0x798; // gestureFinishedTime
		inline constexpr ::std::ptrdiff_t blockHeldInputTimer = 0x79C; // blockHeldInputTimer
		inline constexpr ::std::ptrdiff_t currentGesture = 0x7A0; // currentGesture
		inline constexpr ::std::ptrdiff_t disabledHeldEntity = 0x7A8; // disabledHeldEntity
		inline constexpr ::std::ptrdiff_t nextGestureMenuOpenTime = 0x7B0; // nextGestureMenuOpenTime
		inline constexpr ::std::ptrdiff_t lastGestureCancel = 0x7B4; // lastGestureCancel
		inline constexpr ::std::ptrdiff_t client_lastHelloTime = 0x7B8; // client_lastHelloTime
		inline constexpr ::std::ptrdiff_t currentTeam = 0x7C0; // currentTeam
		inline constexpr ::std::ptrdiff_t clientTeam = 0x7C8; // clientTeam
		inline constexpr ::std::ptrdiff_t lastReceivedTeamTime = 0x7D0; // lastReceivedTeamTime
		inline constexpr ::std::ptrdiff_t lastPresenceTeamId = 0x7D8; // lastPresenceTeamId
		inline constexpr ::std::ptrdiff_t lastPresenceTeamSize = 0x7E0; // lastPresenceTeamSize
		inline constexpr ::std::ptrdiff_t playerGroupKey = 0x7E8; // playerGroupKey
		inline constexpr ::std::ptrdiff_t playerGroupSizeKey = 0x7F0; // playerGroupSizeKey
		inline constexpr ::std::ptrdiff_t clActiveItem = 0x7F8; // clActiveItem
		inline constexpr ::std::ptrdiff_t ClientCurrentMapNotes = 0x800; // ClientCurrentMapNotes
		inline constexpr ::std::ptrdiff_t ClientCurrentDeathNote = 0x808; // ClientCurrentDeathNote
		inline constexpr ::std::ptrdiff_t keepOpenMapInterface = 0x810; // keepOpenMapInterface
		inline constexpr ::std::ptrdiff_t missions = 0x818; // missions
		inline constexpr ::std::ptrdiff_t _activeMission = 0x820; // _activeMission
		inline constexpr ::std::ptrdiff_t modelState = 0x828; // modelState
		inline constexpr ::std::ptrdiff_t mounted = 0x830; // mounted
		inline constexpr ::std::ptrdiff_t nextSeatSwapTime = 0x840; // nextSeatSwapTime
		inline constexpr ::std::ptrdiff_t mountInputHeldDuringDismount = 0x844; // mountInputHeldDuringDismount
		inline constexpr ::std::ptrdiff_t PetEntity = 0x848; // PetEntity
		inline constexpr ::std::ptrdiff_t lastPetCommandIssuedTime = 0x850; // lastPetCommandIssuedTime
		inline constexpr ::std::ptrdiff_t PetPrefabID = 0x854; // PetPrefabID
		inline constexpr ::std::ptrdiff_t PetID = 0x858; // PetID
		inline constexpr ::std::ptrdiff_t ClientCurrentPings = 0x860; // ClientCurrentPings
		inline constexpr ::std::ptrdiff_t tapInProcess = 0x868; // tapInProcess
		inline constexpr ::std::ptrdiff_t lastPingTap = 0x86C; // lastPingTap
		inline constexpr ::std::ptrdiff_t cachedBuildingPrivilegeTime = 0x870; // cachedBuildingPrivilegeTime
		inline constexpr ::std::ptrdiff_t cachedBuildingPrivilege = 0x878; // cachedBuildingPrivilege
		inline constexpr ::std::ptrdiff_t cachedVehicleBuildingBlockedTime = 0x880; // cachedVehicleBuildingBlockedTime
		inline constexpr ::std::ptrdiff_t cachedVehicleBuildingBlocked = 0x884; // cachedVehicleBuildingBlocked
		inline constexpr ::std::ptrdiff_t cachedEntityBuildingBlockedTime = 0x888; // cachedEntityBuildingBlockedTime
		inline constexpr ::std::ptrdiff_t cachedEntityBuildingBlocked = 0x88C; // cachedEntityBuildingBlocked
		inline constexpr ::std::ptrdiff_t cachedPrivilegeFromOther = 0x890; // cachedPrivilegeFromOther
		inline constexpr ::std::ptrdiff_t cachedPrivilegeFromOtherTime = 0x898; // cachedPrivilegeFromOtherTime
		inline constexpr ::std::ptrdiff_t maxProjectileID = 0x89C; // maxProjectileID
		inline constexpr ::std::ptrdiff_t lastSpectateCameraUpdate = 0x8A0; // lastSpectateCameraUpdate
		inline constexpr ::std::ptrdiff_t lastUpdateTime = 0x8A4; // lastUpdateTime
		inline constexpr ::std::ptrdiff_t cachedThreatLevel = 0x8A8; // cachedThreatLevel
		inline constexpr ::std::ptrdiff_t serverTickRate = 0x8AC; // serverTickRate
		inline constexpr ::std::ptrdiff_t clientTickRate = 0x8B0; // clientTickRate
		inline constexpr ::std::ptrdiff_t serverTickInterval = 0x8B4; // serverTickInterval
		inline constexpr ::std::ptrdiff_t clientTickInterval = 0x8B8; // clientTickInterval
		inline constexpr ::std::ptrdiff_t lastSentTickTime = 0x8BC; // lastSentTickTime
		inline constexpr ::std::ptrdiff_t lastTickStopwatch = 0x8C0; // lastTickStopwatch
		inline constexpr ::std::ptrdiff_t lastSentTick = 0x8C8; // lastSentTick
		inline constexpr ::std::ptrdiff_t CurrentTutorialAllowance = 0x8D0; // CurrentTutorialAllowance
		inline constexpr ::std::ptrdiff_t startTutorialCooldown = 0x8D4; // startTutorialCooldown
		inline constexpr ::std::ptrdiff_t nextVisThink = 0x8D8; // nextVisThink
		inline constexpr ::std::ptrdiff_t lastTimeSeen = 0x8DC; // lastTimeSeen
		inline constexpr ::std::ptrdiff_t debugPrevVisible = 0x8E0; // debugPrevVisible
		inline constexpr ::std::ptrdiff_t fallDamageEffect = 0x8E8; // fallDamageEffect
		inline constexpr ::std::ptrdiff_t drownEffect = 0x8F0; // drownEffect
		inline constexpr ::std::ptrdiff_t playerFlags = 0x8F8; // playerFlags
		inline constexpr ::std::ptrdiff_t eyes = 0x900; // eyes
		inline constexpr ::std::ptrdiff_t inventory = 0x908; // inventory
		inline constexpr ::std::ptrdiff_t blueprints = 0x910; // blueprints
		inline constexpr ::std::ptrdiff_t metabolism = 0x918; // metabolism
		inline constexpr ::std::ptrdiff_t modifiers = 0x920; // modifiers
		inline constexpr ::std::ptrdiff_t playerCollider = 0x928; // playerCollider
		inline constexpr ::std::ptrdiff_t Belt = 0x930; // Belt
		inline constexpr ::std::ptrdiff_t playerRigidbody = 0x938; // playerRigidbody
		inline constexpr ::std::ptrdiff_t userID = 0x940; // userID
		inline constexpr ::std::ptrdiff_t UserIDString = 0x948; // UserIDString
		inline constexpr ::std::ptrdiff_t gamemodeteam = 0x950; // gamemodeteam
		inline constexpr ::std::ptrdiff_t reputation = 0x954; // reputation
		inline constexpr ::std::ptrdiff_t _displayName = 0x958; // _displayName
		inline constexpr ::std::ptrdiff_t _lastSetName = 0x960; // _lastSetName
		inline constexpr ::std::ptrdiff_t playerColliderStanding = 0x968; // playerColliderStanding
		inline constexpr ::std::ptrdiff_t playerColliderDucked = 0x97C; // playerColliderDucked
		inline constexpr ::std::ptrdiff_t playerColliderCrawling = 0x990; // playerColliderCrawling
		inline constexpr ::std::ptrdiff_t playerColliderLyingDown = 0x9A4; // playerColliderLyingDown
		inline constexpr ::std::ptrdiff_t cachedProtection = 0x9B8; // cachedProtection
		inline constexpr ::std::ptrdiff_t lastHeadshotSoundTime = 0x9C0; // lastHeadshotSoundTime
		inline constexpr ::std::ptrdiff_t nextColliderRefreshTime = 0x9C4; // nextColliderRefreshTime
		inline constexpr ::std::ptrdiff_t weaponMoveSpeedScale = 0x9C8; // weaponMoveSpeedScale
		inline constexpr ::std::ptrdiff_t clothingBlocksAiming = 0x9CC; // clothingBlocksAiming
		inline constexpr ::std::ptrdiff_t clothingMoveSpeedReduction = 0x9D0; // clothingMoveSpeedReduction
		inline constexpr ::std::ptrdiff_t clothingWaterSpeedBonus = 0x9D4; // clothingWaterSpeedBonus
		inline constexpr ::std::ptrdiff_t clothingAccuracyBonus = 0x9D8; // clothingAccuracyBonus
		inline constexpr ::std::ptrdiff_t equippingBlocked = 0x9DC; // equippingBlocked
		inline constexpr ::std::ptrdiff_t eggVision = 0x9E0; // eggVision
		inline constexpr ::std::ptrdiff_t activeTelephone = 0x9E8; // activeTelephone
		inline constexpr ::std::ptrdiff_t designingAIEntity = 0x9F0; // designingAIEntity
	} // BasePlayer
	namespace BaseEntity {
		inline constexpr ::std::ptrdiff_t ragdoll = 0x80; // ragdoll
		inline constexpr ::std::ptrdiff_t positionLerp = 0x88; // positionLerp
		inline constexpr ::std::ptrdiff_t menuOptions = 0x90; // menuOptions
		inline constexpr ::std::ptrdiff_t bounds = 0x98; // bounds
		inline constexpr ::std::ptrdiff_t impactEffect = 0xB0; // impactEffect
		inline constexpr ::std::ptrdiff_t enableSaving = 0xB8; // enableSaving
		inline constexpr ::std::ptrdiff_t syncPosition = 0xB9; // syncPosition
		inline constexpr ::std::ptrdiff_t model = 0xC0; // model
		inline constexpr ::std::ptrdiff_t flags = 0xC8; // flags
		inline constexpr ::std::ptrdiff_t parentBone = 0xCC; // parentBone
		inline constexpr ::std::ptrdiff_t skinID = 0xD0; // skinID
		inline constexpr ::std::ptrdiff_t _components = 0xD8; // _components
		inline constexpr ::std::ptrdiff_t HasBrain = 0xE0; // HasBrain
		inline constexpr ::std::ptrdiff_t _name = 0xE8; // _name
		inline constexpr ::std::ptrdiff_t OwnerID = 0xF0; // OwnerID
		inline constexpr ::std::ptrdiff_t broadcastProtocol = 0xF8; // broadcastProtocol
		inline constexpr ::std::ptrdiff_t links = 0x100; // links
		inline constexpr ::std::ptrdiff_t linkedToNeighbours = 0x108; // linkedToNeighbours
		inline constexpr ::std::ptrdiff_t _pendingFileRequests = 0x110; // _pendingFileRequests
		inline constexpr ::std::ptrdiff_t updateParentingAction = 0x118; // updateParentingAction
		inline constexpr ::std::ptrdiff_t addedToParentEntity = 0x120; // addedToParentEntity
		inline constexpr ::std::ptrdiff_t itemSkin = 0x128; // itemSkin
		inline constexpr ::std::ptrdiff_t successCallback = 0x130; // successCallback
		inline constexpr ::std::ptrdiff_t failureCallback = 0x138; // failureCallback
		inline constexpr ::std::ptrdiff_t entitySlots = 0x140; // entitySlots
		inline constexpr ::std::ptrdiff_t triggers = 0x148; // triggers
		inline constexpr ::std::ptrdiff_t isVisible = 0x150; // isVisible
		inline constexpr ::std::ptrdiff_t isAnimatorVisible = 0x151; // isAnimatorVisible
		inline constexpr ::std::ptrdiff_t isShadowVisible = 0x152; // isShadowVisible
		inline constexpr ::std::ptrdiff_t localOccludee = 0x158; // localOccludee
		inline constexpr ::std::ptrdiff_t Weight = 0x178; // Weight
	} // BaseEntity
	namespace BaseCombatEntity {
		inline constexpr ::std::ptrdiff_t __menuOption_Menu_Pickup = 0x180; // __menuOption_Menu_Pickup
		inline constexpr ::std::ptrdiff_t skeletonProperties = 0x200; // skeletonProperties
		inline constexpr ::std::ptrdiff_t baseProtection = 0x208; // baseProtection
		inline constexpr ::std::ptrdiff_t startHealth = 0x210; // startHealth
		inline constexpr ::std::ptrdiff_t pickup = 0x218; // pickup
		inline constexpr ::std::ptrdiff_t repair = 0x240; // repair
		inline constexpr ::std::ptrdiff_t ShowHealthInfo = 0x270; // ShowHealthInfo
		inline constexpr ::std::ptrdiff_t lifestate = 0x274; // lifestate
		inline constexpr ::std::ptrdiff_t sendsHitNotification = 0x278; // sendsHitNotification
		inline constexpr ::std::ptrdiff_t sendsMeleeHitNotification = 0x279; // sendsMeleeHitNotification
		inline constexpr ::std::ptrdiff_t markAttackerHostile = 0x27A; // markAttackerHostile
		inline constexpr ::std::ptrdiff_t _health = 0x27C; // _health
		inline constexpr ::std::ptrdiff_t _maxHealth = 0x280; // _maxHealth
		inline constexpr ::std::ptrdiff_t faction = 0x284; // faction
		inline constexpr ::std::ptrdiff_t deathTime = 0x288; // deathTime
		inline constexpr ::std::ptrdiff_t lastNotifyFrame = 0x28C; // lastNotifyFrame
	} // BaseCombatEntity
	namespace BuildingPrivlidge {
		inline constexpr ::std::ptrdiff_t __menuOption_Menu_MaxAuth = 0x4A0; // __menuOption_Menu_MaxAuth
		inline constexpr ::std::ptrdiff_t __menuOption_Menu_RotateVM = 0x520; // __menuOption_Menu_RotateVM
		inline constexpr ::std::ptrdiff_t __menuOption_MenuAuthorize = 0x5A0; // __menuOption_MenuAuthorize
		inline constexpr ::std::ptrdiff_t __menuOption_MenuClearList = 0x620; // __menuOption_MenuClearList
		inline constexpr ::std::ptrdiff_t __menuOption_MenuDeauthorize = 0x6A0; // __menuOption_MenuDeauthorize
		inline constexpr ::std::ptrdiff_t allowedConstructionItems = 0x720; // allowedConstructionItems
		inline constexpr ::std::ptrdiff_t cachedProtectedMinutes = 0x728; // cachedProtectedMinutes
		inline constexpr ::std::ptrdiff_t cachedUpkeepPeriodMinutes = 0x72C; // cachedUpkeepPeriodMinutes
		inline constexpr ::std::ptrdiff_t cachedUpkeepCostFraction = 0x730; // cachedUpkeepCostFraction
		inline constexpr ::std::ptrdiff_t clientAuthed = 0x734; // clientAuthed
		inline constexpr ::std::ptrdiff_t clientAnyAuthed = 0x735; // clientAnyAuthed
		inline constexpr ::std::ptrdiff_t lastProtectedMinuteUpdate = 0x738; // lastProtectedMinuteUpdate
	} // BuildingPrivlidge
	namespace BaseProjectile {
		inline constexpr ::std::ptrdiff_t NoiseRadius = 0x298; // NoiseRadius
		inline constexpr ::std::ptrdiff_t damageScale = 0x29C; // damageScale
		inline constexpr ::std::ptrdiff_t distanceScale = 0x2A0; // distanceScale
		inline constexpr ::std::ptrdiff_t projectileVelocityScale = 0x2A4; // projectileVelocityScale
		inline constexpr ::std::ptrdiff_t automatic = 0x2A8; // automatic
		inline constexpr ::std::ptrdiff_t usableByTurret = 0x2A9; // usableByTurret
		inline constexpr ::std::ptrdiff_t turretDamageScale = 0x2AC; // turretDamageScale
		inline constexpr ::std::ptrdiff_t attackFX = 0x2B0; // attackFX
		inline constexpr ::std::ptrdiff_t silencedAttack = 0x2B8; // silencedAttack
		inline constexpr ::std::ptrdiff_t muzzleBrakeAttack = 0x2C0; // muzzleBrakeAttack
		inline constexpr ::std::ptrdiff_t MuzzlePoint = 0x2C8; // MuzzlePoint
		inline constexpr ::std::ptrdiff_t reloadTime = 0x2D0; // reloadTime
		inline constexpr ::std::ptrdiff_t canUnloadAmmo = 0x2D4; // canUnloadAmmo
		inline constexpr ::std::ptrdiff_t primaryMagazine = 0x2D8; // primaryMagazine
		inline constexpr ::std::ptrdiff_t fractionalReload = 0x2E0; // fractionalReload
		inline constexpr ::std::ptrdiff_t reloadStartDuration = 0x2E4; // reloadStartDuration
		inline constexpr ::std::ptrdiff_t reloadFractionDuration = 0x2E8; // reloadFractionDuration
		inline constexpr ::std::ptrdiff_t reloadEndDuration = 0x2EC; // reloadEndDuration
		inline constexpr ::std::ptrdiff_t aimSway = 0x2F0; // aimSway
		inline constexpr ::std::ptrdiff_t aimSwaySpeed = 0x2F4; // aimSwaySpeed
		inline constexpr ::std::ptrdiff_t recoil = 0x2F8; // recoil
		inline constexpr ::std::ptrdiff_t aimconeCurve = 0x300; // aimconeCurve
		inline constexpr ::std::ptrdiff_t aimCone = 0x308; // aimCone
		inline constexpr ::std::ptrdiff_t hipAimCone = 0x30C; // hipAimCone
		inline constexpr ::std::ptrdiff_t aimconePenaltyPerShot = 0x310; // aimconePenaltyPerShot
		inline constexpr ::std::ptrdiff_t aimConePenaltyMax = 0x314; // aimConePenaltyMax
		inline constexpr ::std::ptrdiff_t aimconePenaltyRecoverTime = 0x318; // aimconePenaltyRecoverTime
		inline constexpr ::std::ptrdiff_t aimconePenaltyRecoverDelay = 0x31C; // aimconePenaltyRecoverDelay
		inline constexpr ::std::ptrdiff_t stancePenaltyScale = 0x320; // stancePenaltyScale
		inline constexpr ::std::ptrdiff_t hasADS = 0x324; // hasADS
		inline constexpr ::std::ptrdiff_t noAimingWhileCycling = 0x325; // noAimingWhileCycling
		inline constexpr ::std::ptrdiff_t manualCycle = 0x326; // manualCycle
		inline constexpr ::std::ptrdiff_t needsCycle = 0x327; // needsCycle
		inline constexpr ::std::ptrdiff_t isCycling = 0x328; // isCycling
		inline constexpr ::std::ptrdiff_t aiming = 0x329; // aiming
		inline constexpr ::std::ptrdiff_t useEmptyAmmoState = 0x32A; // useEmptyAmmoState
		inline constexpr ::std::ptrdiff_t isBurstWeapon = 0x32B; // isBurstWeapon
		inline constexpr ::std::ptrdiff_t canChangeFireModes = 0x32C; // canChangeFireModes
		inline constexpr ::std::ptrdiff_t defaultOn = 0x32D; // defaultOn
		inline constexpr ::std::ptrdiff_t internalBurstRecoilScale = 0x330; // internalBurstRecoilScale
		inline constexpr ::std::ptrdiff_t internalBurstFireRateScale = 0x334; // internalBurstFireRateScale
		inline constexpr ::std::ptrdiff_t internalBurstAimConeScale = 0x338; // internalBurstAimConeScale
		inline constexpr ::std::ptrdiff_t resetDuration = 0x33C; // resetDuration
		inline constexpr ::std::ptrdiff_t numShotsFired = 0x340; // numShotsFired
		inline constexpr ::std::ptrdiff_t nextReloadTime = 0x344; // nextReloadTime
		inline constexpr ::std::ptrdiff_t startReloadTime = 0x348; // startReloadTime
		inline constexpr ::std::ptrdiff_t stancePenalty = 0x34C; // stancePenalty
		inline constexpr ::std::ptrdiff_t aimconePenalty = 0x350; // aimconePenalty
		inline constexpr ::std::ptrdiff_t cachedModHash = 0x354; // cachedModHash
		inline constexpr ::std::ptrdiff_t sightAimConeScale = 0x358; // sightAimConeScale
		inline constexpr ::std::ptrdiff_t sightAimConeOffset = 0x35C; // sightAimConeOffset
		inline constexpr ::std::ptrdiff_t hipAimConeScale = 0x360; // hipAimConeScale
		inline constexpr ::std::ptrdiff_t hipAimConeOffset = 0x364; // hipAimConeOffset
		inline constexpr ::std::ptrdiff_t isReloading = 0x368; // isReloading
		inline constexpr ::std::ptrdiff_t timeSinceReloadFinished = 0x36C; // timeSinceReloadFinished
		inline constexpr ::std::ptrdiff_t swaySampleTime = 0x370; // swaySampleTime
		inline constexpr ::std::ptrdiff_t lastShotTime = 0x374; // lastShotTime
		inline constexpr ::std::ptrdiff_t reloadPressTime = 0x378; // reloadPressTime
		inline constexpr ::std::ptrdiff_t ammoTypePreReload = 0x380; // ammoTypePreReload
		inline constexpr ::std::ptrdiff_t fractionalReloadDesiredCount = 0x388; // fractionalReloadDesiredCount
		inline constexpr ::std::ptrdiff_t fractionalReloadNumAdded = 0x38C; // fractionalReloadNumAdded
		inline constexpr ::std::ptrdiff_t currentBurst = 0x390; // currentBurst
		inline constexpr ::std::ptrdiff_t triggerReady = 0x394; // triggerReady
		inline constexpr ::std::ptrdiff_t nextHeightCheckTime = 0x398; // nextHeightCheckTime
		inline constexpr ::std::ptrdiff_t cachedUnderground = 0x39C; // cachedUnderground
		inline constexpr ::std::ptrdiff_t createdProjectiles = 0x3A0; // createdProjectiles
	} // BaseProjectile
	namespace Magazine {
		inline constexpr ::std::ptrdiff_t definition = 0x10; // definition
		inline constexpr ::std::ptrdiff_t capacity = 0x18; // capacity
		inline constexpr ::std::ptrdiff_t contents = 0x1C; // contents
		inline constexpr ::std::ptrdiff_t ammoType = 0x20; // ammoType
		inline constexpr ::std::ptrdiff_t allowPlayerReloading = 0x28; // allowPlayerReloading
		inline constexpr ::std::ptrdiff_t allowAmmoSwitching = 0x29; // allowAmmoSwitching
	} // Magazine
	namespace PlayerInventory {
		inline constexpr ::std::ptrdiff_t containerMain = 0x28; // containerMain
		inline constexpr ::std::ptrdiff_t containerBelt = 0x30; // containerBelt
		inline constexpr ::std::ptrdiff_t containerWear = 0x38; // containerWear
		inline constexpr ::std::ptrdiff_t crafting = 0x40; // crafting
		inline constexpr ::std::ptrdiff_t loot = 0x48; // loot
		inline constexpr ::std::ptrdiff_t lastSet = 0x50; // lastSet
		inline constexpr ::std::ptrdiff_t cachedResult = 0x58; // cachedResult
		inline constexpr ::std::ptrdiff_t returnItems = 0x68; // returnItems
	} // PlayerInventory
	namespace ItemContainer {
		inline constexpr ::std::ptrdiff_t flags = 0x10; // flags
		inline constexpr ::std::ptrdiff_t allowedContents = 0x14; // allowedContents
		inline constexpr ::std::ptrdiff_t onlyAllowedItems = 0x18; // onlyAllowedItems
		inline constexpr ::std::ptrdiff_t availableSlots = 0x20; // availableSlots
		inline constexpr ::std::ptrdiff_t capacity = 0x28; // capacity
		inline constexpr ::std::ptrdiff_t uid = 0x30; // uid
		inline constexpr ::std::ptrdiff_t dirty = 0x38; // dirty
		inline constexpr ::std::ptrdiff_t itemList = 0x40; // itemList
		inline constexpr ::std::ptrdiff_t temperature = 0x48; // temperature
		inline constexpr ::std::ptrdiff_t parent = 0x50; // parent
		inline constexpr ::std::ptrdiff_t playerOwner = 0x58; // playerOwner
		inline constexpr ::std::ptrdiff_t entityOwner = 0x60; // entityOwner
		inline constexpr ::std::ptrdiff_t isServer = 0x68; // isServer
		inline constexpr ::std::ptrdiff_t maxStackSize = 0x6C; // maxStackSize
		inline constexpr ::std::ptrdiff_t containerVolume = 0x70; // containerVolume
	} // ItemContainer
	namespace PlayerModel {
		inline constexpr ::std::ptrdiff_t collision = 0x20; // collision
		inline constexpr ::std::ptrdiff_t censorshipCube = 0x28; // censorshipCube
		inline constexpr ::std::ptrdiff_t censorshipCubeBreasts = 0x30; // censorshipCubeBreasts
		inline constexpr ::std::ptrdiff_t jawBone = 0x38; // jawBone
		inline constexpr ::std::ptrdiff_t neckBone = 0x40; // neckBone
		inline constexpr ::std::ptrdiff_t headBone = 0x48; // headBone
		inline constexpr ::std::ptrdiff_t eyeController = 0x50; // eyeController
		inline constexpr ::std::ptrdiff_t blinkController = 0x58; // blinkController
		inline constexpr ::std::ptrdiff_t SpineBones = 0x60; // SpineBones
		inline constexpr ::std::ptrdiff_t leftFootBone = 0x68; // leftFootBone
		inline constexpr ::std::ptrdiff_t rightFootBone = 0x70; // rightFootBone
		inline constexpr ::std::ptrdiff_t leftHandPropBone = 0x78; // leftHandPropBone
		inline constexpr ::std::ptrdiff_t rightHandPropBone = 0x80; // rightHandPropBone
		inline constexpr ::std::ptrdiff_t rightHandTarget = 0x88; // rightHandTarget
		inline constexpr ::std::ptrdiff_t isPreview = 0x94; // isPreview
		inline constexpr ::std::ptrdiff_t leftHandTargetPosition = 0x98; // leftHandTargetPosition
		inline constexpr ::std::ptrdiff_t leftHandTargetRotation = 0xA4; // leftHandTargetRotation
		inline constexpr ::std::ptrdiff_t rightHandTargetPosition = 0xB4; // rightHandTargetPosition
		inline constexpr ::std::ptrdiff_t rightHandTargetRotation = 0xC0; // rightHandTargetRotation
		inline constexpr ::std::ptrdiff_t steeringTargetDegrees = 0xD0; // steeringTargetDegrees
		inline constexpr ::std::ptrdiff_t rightFootTargetPosition = 0xD4; // rightFootTargetPosition
		inline constexpr ::std::ptrdiff_t rightFootTargetRotation = 0xE0; // rightFootTargetRotation
		inline constexpr ::std::ptrdiff_t leftFootTargetPosition = 0xF0; // leftFootTargetPosition
		inline constexpr ::std::ptrdiff_t leftFootTargetRotation = 0xFC; // leftFootTargetRotation
		inline constexpr ::std::ptrdiff_t CinematicAnimationController = 0x110; // CinematicAnimationController
		inline constexpr ::std::ptrdiff_t DefaultAvatar = 0x118; // DefaultAvatar
		inline constexpr ::std::ptrdiff_t CinematicAvatar = 0x120; // CinematicAvatar
		inline constexpr ::std::ptrdiff_t DefaultHoldType = 0x128; // DefaultHoldType
		inline constexpr ::std::ptrdiff_t SleepGesture = 0x130; // SleepGesture
		inline constexpr ::std::ptrdiff_t CrawlToIncapacitatedGesture = 0x138; // CrawlToIncapacitatedGesture
		inline constexpr ::std::ptrdiff_t StandToIncapacitatedGesture = 0x140; // StandToIncapacitatedGesture
		inline constexpr ::std::ptrdiff_t CurrentGesture = 0x148; // CurrentGesture
		inline constexpr ::std::ptrdiff_t MaleSkin = 0x150; // MaleSkin
		inline constexpr ::std::ptrdiff_t FemaleSkin = 0x158; // FemaleSkin
		inline constexpr ::std::ptrdiff_t subsurfaceProfile = 0x160; // subsurfaceProfile
		inline constexpr ::std::ptrdiff_t voiceVolume = 0x168; // voiceVolume
		inline constexpr ::std::ptrdiff_t skinColor = 0x16C; // skinColor
		inline constexpr ::std::ptrdiff_t skinNumber = 0x170; // skinNumber
		inline constexpr ::std::ptrdiff_t meshNumber = 0x174; // meshNumber
		inline constexpr ::std::ptrdiff_t hairNumber = 0x178; // hairNumber
		inline constexpr ::std::ptrdiff_t skinType = 0x17C; // skinType
		inline constexpr ::std::ptrdiff_t movementSounds = 0x180; // movementSounds
		inline constexpr ::std::ptrdiff_t showSash = 0x188; // showSash
		inline constexpr ::std::ptrdiff_t tempPoseType = 0x18C; // tempPoseType
		inline constexpr ::std::ptrdiff_t underwearSkin = 0x190; // underwearSkin
		inline constexpr ::std::ptrdiff_t overrideSkinSeed = 0x198; // overrideSkinSeed
		inline constexpr ::std::ptrdiff_t AimAngles = 0x1A0; // AimAngles
		inline constexpr ::std::ptrdiff_t LookAngles = 0x1B0; // LookAngles
		inline constexpr ::std::ptrdiff_t modelState = 0x1C0; // modelState
		inline constexpr ::std::ptrdiff_t position = 0x1C8; // position
		inline constexpr ::std::ptrdiff_t velocity = 0x1D4; // velocity
		inline constexpr ::std::ptrdiff_t speedOverride = 0x1E0; // speedOverride
		inline constexpr ::std::ptrdiff_t newVelocity = 0x1EC; // newVelocity
		inline constexpr ::std::ptrdiff_t rotation = 0x1F8; // rotation
		inline constexpr ::std::ptrdiff_t mountedRotation = 0x208; // mountedRotation
		inline constexpr ::std::ptrdiff_t fallingTime = 0x218; // fallingTime
		inline constexpr ::std::ptrdiff_t smoothLeftFootIK = 0x21C; // smoothLeftFootIK
		inline constexpr ::std::ptrdiff_t smoothRightFootIK = 0x228; // smoothRightFootIK
		inline constexpr ::std::ptrdiff_t drawShadowOnly = 0x234; // drawShadowOnly
		inline constexpr ::std::ptrdiff_t isIncapacitated = 0x235; // isIncapacitated
		inline constexpr ::std::ptrdiff_t flinchLocation = 0x238; // flinchLocation
		inline constexpr ::std::ptrdiff_t visible = 0x23C; // visible
		inline constexpr ::std::ptrdiff_t nameTag = 0x240; // nameTag
		inline constexpr ::std::ptrdiff_t animatorNeedsWarmup = 0x248; // animatorNeedsWarmup
		inline constexpr ::std::ptrdiff_t isLocalPlayer = 0x249; // isLocalPlayer
		inline constexpr ::std::ptrdiff_t aimSoundDef = 0x250; // aimSoundDef
		inline constexpr ::std::ptrdiff_t aimEndSoundDef = 0x258; // aimEndSoundDef
		inline constexpr ::std::ptrdiff_t InGesture = 0x260; // InGesture
		inline constexpr ::std::ptrdiff_t CurrentGestureConfig = 0x268; // CurrentGestureConfig
		inline constexpr ::std::ptrdiff_t InCinematic = 0x270; // InCinematic
		inline constexpr ::std::ptrdiff_t defaultAnimatorController = 0x278; // defaultAnimatorController
		inline constexpr ::std::ptrdiff_t _multiMesh = 0x280; // _multiMesh
		inline constexpr ::std::ptrdiff_t _animator = 0x288; // _animator
		inline constexpr ::std::ptrdiff_t _lodGroup = 0x290; // _lodGroup
		inline constexpr ::std::ptrdiff_t _currentGesture = 0x298; // _currentGesture
		inline constexpr ::std::ptrdiff_t holdTypeLock = 0x2A0; // holdTypeLock
		inline constexpr ::std::ptrdiff_t hasHeldEntity = 0x2A4; // hasHeldEntity
		inline constexpr ::std::ptrdiff_t wasMountedRightAim = 0x2A5; // wasMountedRightAim
		inline constexpr ::std::ptrdiff_t cachedMask = 0x2A8; // cachedMask
		inline constexpr ::std::ptrdiff_t cachedConstructionMask = 0x2AC; // cachedConstructionMask
		inline constexpr ::std::ptrdiff_t WorkshopHeldEntity = 0x2B0; // WorkshopHeldEntity
		inline constexpr ::std::ptrdiff_t wasCrawling = 0x2B8; // wasCrawling
		inline constexpr ::std::ptrdiff_t mountedSpineLookWeight = 0x2BC; // mountedSpineLookWeight
		inline constexpr ::std::ptrdiff_t mountedAnimSpeed = 0x2C0; // mountedAnimSpeed
		inline constexpr ::std::ptrdiff_t preserveBones = 0x2C4; // preserveBones
		inline constexpr ::std::ptrdiff_t blendShapeControllers = 0x2D0; // blendShapeControllers
		inline constexpr ::std::ptrdiff_t IsNpc = 0x2D8; // IsNpc
		inline constexpr ::std::ptrdiff_t timeSinceReactionStart = 0x2DC; // timeSinceReactionStart
		inline constexpr ::std::ptrdiff_t timeSinceLeftFootTest = 0x2E0; // timeSinceLeftFootTest
		inline constexpr ::std::ptrdiff_t cachedLeftFootPos = 0x2E4; // cachedLeftFootPos
		inline constexpr ::std::ptrdiff_t cachedLeftFootNormal = 0x2F0; // cachedLeftFootNormal
		inline constexpr ::std::ptrdiff_t timeSinceRightFootTest = 0x2FC; // timeSinceRightFootTest
		inline constexpr ::std::ptrdiff_t cachedRightFootPos = 0x300; // cachedRightFootPos
		inline constexpr ::std::ptrdiff_t cachedRightFootNormal = 0x30C; // cachedRightFootNormal
		inline constexpr ::std::ptrdiff_t _smoothAimWeight = 0x318; // _smoothAimWeight
		inline constexpr ::std::ptrdiff_t _smoothVelocity = 0x31C; // _smoothVelocity
		inline constexpr ::std::ptrdiff_t _smoothlookAngle = 0x320; // _smoothlookAngle
		inline constexpr ::std::ptrdiff_t allowMountedHeadLook = 0x32C; // allowMountedHeadLook
		inline constexpr ::std::ptrdiff_t overrideLeftHandIkWeight = 0x330; // overrideLeftHandIkWeight
		inline constexpr ::std::ptrdiff_t overrideRightHandIkWeight = 0x334; // overrideRightHandIkWeight
		inline constexpr ::std::ptrdiff_t smoothLookDir = 0x338; // smoothLookDir
		inline constexpr ::std::ptrdiff_t lastSafeLookDir = 0x344; // lastSafeLookDir
		inline constexpr ::std::ptrdiff_t cinematicLookAt = 0x350; // cinematicLookAt
		inline constexpr ::std::ptrdiff_t lastCinematicLookAt = 0x35C; // lastCinematicLookAt
		inline constexpr ::std::ptrdiff_t cinematicLookAtWeight = 0x368; // cinematicLookAtWeight
		inline constexpr ::std::ptrdiff_t cinematicTargetWeight = 0x36C; // cinematicTargetWeight
		inline constexpr ::std::ptrdiff_t Shoulders = 0x370; // Shoulders
		inline constexpr ::std::ptrdiff_t AdditionalSpineBones = 0x378; // AdditionalSpineBones
		inline constexpr ::std::ptrdiff_t LegParts = 0x380; // LegParts
		inline constexpr ::std::ptrdiff_t fadeToggles = 0x388; // fadeToggles
		inline constexpr ::std::ptrdiff_t fakeSpineBones = 0x390; // fakeSpineBones
		inline constexpr ::std::ptrdiff_t extraLeanBack = 0x398; // extraLeanBack
		inline constexpr ::std::ptrdiff_t timeInArmsMode = 0x3A0; // timeInArmsMode
	} // PlayerModel
	namespace ModelState {
		inline constexpr ::std::ptrdiff_t waterLevel = 0x10; // waterLevel
		inline constexpr ::std::ptrdiff_t lookDir = 0x14; // lookDir
		inline constexpr ::std::ptrdiff_t flags = 0x20; // flags
		inline constexpr ::std::ptrdiff_t poseType = 0x24; // poseType
		inline constexpr ::std::ptrdiff_t inheritedVelocity = 0x28; // inheritedVelocity
		inline constexpr ::std::ptrdiff_t ladderType = 0x34; // ladderType
		inline constexpr ::std::ptrdiff_t ShouldPool = 0x38; // ShouldPool
		inline constexpr ::std::ptrdiff_t _disposed = 0x39; // _disposed
	} // ModelState
	namespace Item {
		inline constexpr ::std::ptrdiff_t _condition = 0x10; // _condition
		inline constexpr ::std::ptrdiff_t _maxCondition = 0x14; // _maxCondition
		inline constexpr ::std::ptrdiff_t info = 0x18; // info
		inline constexpr ::std::ptrdiff_t uid = 0x20; // uid
		inline constexpr ::std::ptrdiff_t dirty = 0x28; // dirty
		inline constexpr ::std::ptrdiff_t amount = 0x2C; // amount
		inline constexpr ::std::ptrdiff_t position = 0x30; // position
		inline constexpr ::std::ptrdiff_t busyTime = 0x34; // busyTime
		inline constexpr ::std::ptrdiff_t removeTime = 0x38; // removeTime
		inline constexpr ::std::ptrdiff_t fuel = 0x3C; // fuel
		inline constexpr ::std::ptrdiff_t isServer = 0x40; // isServer
		inline constexpr ::std::ptrdiff_t instanceData = 0x48; // instanceData
		inline constexpr ::std::ptrdiff_t skin = 0x50; // skin
		inline constexpr ::std::ptrdiff_t name = 0x58; // name
		inline constexpr ::std::ptrdiff_t streamerName = 0x60; // streamerName
		inline constexpr ::std::ptrdiff_t text = 0x68; // text
		inline constexpr ::std::ptrdiff_t ammoCount = 0x70; // ammoCount
		inline constexpr ::std::ptrdiff_t cookTimeLeft = 0x78; // cookTimeLeft
		inline constexpr ::std::ptrdiff_t progressBar = 0x7C; // progressBar
		inline constexpr ::std::ptrdiff_t flags = 0x88; // flags
		inline constexpr ::std::ptrdiff_t contents = 0x90; // contents
		inline constexpr ::std::ptrdiff_t parent = 0x98; // parent
		inline constexpr ::std::ptrdiff_t worldEnt = 0xA0; // worldEnt
		inline constexpr ::std::ptrdiff_t heldEntity = 0xB0; // heldEntity
	} // Item
	namespace ItemDefinition {
		inline constexpr ::std::ptrdiff_t itemid = 0x20; // itemid
		inline constexpr ::std::ptrdiff_t shortname = 0x28; // shortname
		inline constexpr ::std::ptrdiff_t displayName = 0x30; // displayName
		inline constexpr ::std::ptrdiff_t displayDescription = 0x38; // displayDescription
		inline constexpr ::std::ptrdiff_t iconSprite = 0x40; // iconSprite
		inline constexpr ::std::ptrdiff_t category = 0x48; // category
		inline constexpr ::std::ptrdiff_t selectionPanel = 0x4C; // selectionPanel
		inline constexpr ::std::ptrdiff_t maxDraggable = 0x50; // maxDraggable
		inline constexpr ::std::ptrdiff_t itemType = 0x54; // itemType
		inline constexpr ::std::ptrdiff_t amountType = 0x58; // amountType
		inline constexpr ::std::ptrdiff_t occupySlots = 0x5C; // occupySlots
		inline constexpr ::std::ptrdiff_t stackable = 0x60; // stackable
		inline constexpr ::std::ptrdiff_t volume = 0x64; // volume
		inline constexpr ::std::ptrdiff_t quickDespawn = 0x68; // quickDespawn
		inline constexpr ::std::ptrdiff_t blockStealingInSafeZone = 0x69; // blockStealingInSafeZone
		inline constexpr ::std::ptrdiff_t tutorialAllowance = 0x6C; // tutorialAllowance
		inline constexpr ::std::ptrdiff_t rarity = 0x70; // rarity
		inline constexpr ::std::ptrdiff_t despawnRarity = 0x74; // despawnRarity
		inline constexpr ::std::ptrdiff_t spawnAsBlueprint = 0x78; // spawnAsBlueprint
		inline constexpr ::std::ptrdiff_t inventoryGrabSound = 0x80; // inventoryGrabSound
		inline constexpr ::std::ptrdiff_t inventoryDropSound = 0x88; // inventoryDropSound
		inline constexpr ::std::ptrdiff_t physImpactSoundDef = 0x90; // physImpactSoundDef
		inline constexpr ::std::ptrdiff_t condition = 0x98; // condition
		inline constexpr ::std::ptrdiff_t hidden = 0xB0; // hidden
		inline constexpr ::std::ptrdiff_t flags = 0xB4; // flags
		inline constexpr ::std::ptrdiff_t hideSelectedPanel = 0xB8; // hideSelectedPanel
		inline constexpr ::std::ptrdiff_t steamItem = 0xC0; // steamItem
		inline constexpr ::std::ptrdiff_t steamDlc = 0xC8; // steamDlc
		inline constexpr ::std::ptrdiff_t Parent = 0xD0; // Parent
		inline constexpr ::std::ptrdiff_t worldModelPrefab = 0xD8; // worldModelPrefab
		inline constexpr ::std::ptrdiff_t treatAsComponentForRepairs = 0xE8; // treatAsComponentForRepairs
		inline constexpr ::std::ptrdiff_t AlignWorldModelOnDrop = 0xE9; // AlignWorldModelOnDrop
		inline constexpr ::std::ptrdiff_t WorldModelDropOffset = 0xEC; // WorldModelDropOffset
		inline constexpr ::std::ptrdiff_t isRedirectOf = 0xF8; // isRedirectOf
		inline constexpr ::std::ptrdiff_t redirectVendingBehaviour = 0x100; // redirectVendingBehaviour
		inline constexpr ::std::ptrdiff_t itemMods = 0x108; // itemMods
		inline constexpr ::std::ptrdiff_t Traits = 0x110; // Traits
		inline constexpr ::std::ptrdiff_t _skins2 = 0x120; // _skins2
		inline constexpr ::std::ptrdiff_t panel = 0x128; // panel
		inline constexpr ::std::ptrdiff_t ItemModWearable = 0x130; // ItemModWearable
		inline constexpr ::std::ptrdiff_t ItemModBurnable = 0x138; // ItemModBurnable
		inline constexpr ::std::ptrdiff_t ItemModCookable = 0x140; // ItemModCookable
		inline constexpr ::std::ptrdiff_t isHoldable = 0x148; // isHoldable
		inline constexpr ::std::ptrdiff_t isUsable = 0x149; // isUsable
		inline constexpr ::std::ptrdiff_t CraftableWithSkin = 0x14A; // CraftableWithSkin
		inline constexpr ::std::ptrdiff_t Children = 0x150; // Children
	} // ItemDefinition
	namespace DroppedItem {
		inline constexpr ::std::ptrdiff_t __menuOption_Menu_Open = 0x290; // __menuOption_Menu_Open
		inline constexpr ::std::ptrdiff_t lootPanelName = 0x310; // lootPanelName
		inline constexpr ::std::ptrdiff_t maxItemCount = 0x318; // maxItemCount
		inline constexpr ::std::ptrdiff_t playerSteamID = 0x320; // playerSteamID
		inline constexpr ::std::ptrdiff_t _playerName = 0x328; // _playerName
		inline constexpr ::std::ptrdiff_t ItemBasedDespawn = 0x330; // ItemBasedDespawn
		inline constexpr ::std::ptrdiff_t onlyOwnerLoot = 0x331; // onlyOwnerLoot
		inline constexpr ::std::ptrdiff_t openSound = 0x338; // openSound
		inline constexpr ::std::ptrdiff_t closeSound = 0x340; // closeSound
	} // DroppedItem
	namespace WorldItem {
		inline constexpr ::std::ptrdiff_t allowPickup = 0x180; // allowPickup
		inline constexpr ::std::ptrdiff_t item = 0x188; // item
	} // WorldItem
	namespace Model {
		inline constexpr ::std::ptrdiff_t collision = 0x20; // collision
		inline constexpr ::std::ptrdiff_t rootBone = 0x28; // rootBone
		inline constexpr ::std::ptrdiff_t headBone = 0x30; // headBone
		inline constexpr ::std::ptrdiff_t eyeBone = 0x38; // eyeBone
		inline constexpr ::std::ptrdiff_t animator = 0x40; // animator
		inline constexpr ::std::ptrdiff_t skeleton = 0x48; // skeleton
		inline constexpr ::std::ptrdiff_t boneTransforms = 0x50; // boneTransforms
		inline constexpr ::std::ptrdiff_t boneNames = 0x58; // boneNames
		inline constexpr ::std::ptrdiff_t boneDict = 0x60; // boneDict
		inline constexpr ::std::ptrdiff_t skin = 0x68; // skin
		inline constexpr ::std::ptrdiff_t _lodGroup = 0x70; // _lodGroup
	} // Model
	namespace RecoilProperties {
		inline constexpr ::std::ptrdiff_t recoilYawMin = 0x18; // recoilYawMin
		inline constexpr ::std::ptrdiff_t recoilYawMax = 0x1C; // recoilYawMax
		inline constexpr ::std::ptrdiff_t recoilPitchMin = 0x20; // recoilPitchMin
		inline constexpr ::std::ptrdiff_t recoilPitchMax = 0x24; // recoilPitchMax
		inline constexpr ::std::ptrdiff_t timeToTakeMin = 0x28; // timeToTakeMin
		inline constexpr ::std::ptrdiff_t timeToTakeMax = 0x2C; // timeToTakeMax
		inline constexpr ::std::ptrdiff_t ADSScale = 0x30; // ADSScale
		inline constexpr ::std::ptrdiff_t movementPenalty = 0x34; // movementPenalty
		inline constexpr ::std::ptrdiff_t clampPitch = 0x38; // clampPitch
		inline constexpr ::std::ptrdiff_t pitchCurve = 0x40; // pitchCurve
		inline constexpr ::std::ptrdiff_t yawCurve = 0x48; // yawCurve
		inline constexpr ::std::ptrdiff_t useCurves = 0x50; // useCurves
		inline constexpr ::std::ptrdiff_t curvesAsScalar = 0x51; // curvesAsScalar
		inline constexpr ::std::ptrdiff_t shotsUntilMax = 0x54; // shotsUntilMax
		inline constexpr ::std::ptrdiff_t maxRecoilRadius = 0x58; // maxRecoilRadius
		inline constexpr ::std::ptrdiff_t overrideAimconeWithCurve = 0x5C; // overrideAimconeWithCurve
		inline constexpr ::std::ptrdiff_t aimconeCurveScale = 0x60; // aimconeCurveScale
		inline constexpr ::std::ptrdiff_t aimconeCurve = 0x68; // aimconeCurve
		inline constexpr ::std::ptrdiff_t aimconeProbabilityCurve = 0x70; // aimconeProbabilityCurve
		inline constexpr ::std::ptrdiff_t ammoAimconeScaleMultiProjectile = 0x78; // ammoAimconeScaleMultiProjectile
		inline constexpr ::std::ptrdiff_t ammoAimconeScaleSingleProjectile = 0x7C; // ammoAimconeScaleSingleProjectile
		inline constexpr ::std::ptrdiff_t newRecoilOverride = 0x80; // newRecoilOverride
	} // RecoilProperties
	namespace BaseFishingRod {
		inline constexpr ::std::ptrdiff_t FishingBobberRef = 0x210; // FishingBobberRef
		inline constexpr ::std::ptrdiff_t FishCatchDistance = 0x218; // FishCatchDistance
		inline constexpr ::std::ptrdiff_t ReelLineRenderer = 0x220; // ReelLineRenderer
		inline constexpr ::std::ptrdiff_t LineRendererWorldStartPos = 0x228; // LineRendererWorldStartPos
		inline constexpr ::std::ptrdiff_t CurrentState = 0x230; // CurrentState
		inline constexpr ::std::ptrdiff_t currentFishState = 0x234; // currentFishState
		inline constexpr ::std::ptrdiff_t currentBobber = 0x238; // currentBobber
		inline constexpr ::std::ptrdiff_t ConditionLossOnSuccess = 0x248; // ConditionLossOnSuccess
		inline constexpr ::std::ptrdiff_t ConditionLossOnFail = 0x24C; // ConditionLossOnFail
		inline constexpr ::std::ptrdiff_t GlobalStrainSpeedMultiplier = 0x250; // GlobalStrainSpeedMultiplier
		inline constexpr ::std::ptrdiff_t MaxCastDistance = 0x254; // MaxCastDistance
		inline constexpr ::std::ptrdiff_t ForceFish = 0x258; // ForceFish
		inline constexpr ::std::ptrdiff_t BobberPreview = 0x260; // BobberPreview
		inline constexpr ::std::ptrdiff_t onLineSoundDef = 0x268; // onLineSoundDef
		inline constexpr ::std::ptrdiff_t strainSoundDef = 0x270; // strainSoundDef
		inline constexpr ::std::ptrdiff_t strainGainCurve = 0x278; // strainGainCurve
		inline constexpr ::std::ptrdiff_t tensionBreakSoundDef = 0x280; // tensionBreakSoundDef
		inline constexpr ::std::ptrdiff_t lineRendererPositionsArray = 0x288; // lineRendererPositionsArray
		inline constexpr ::std::ptrdiff_t lineRendererResultArray = 0x290; // lineRendererResultArray
		inline constexpr ::std::ptrdiff_t lineRendererSlack = 0x298; // lineRendererSlack
		inline constexpr ::std::ptrdiff_t clientStrainAmountNormalised = 0x2A0; // clientStrainAmountNormalised
		inline constexpr ::std::ptrdiff_t canCancel = 0x2A4; // canCancel
		inline constexpr ::std::ptrdiff_t rodViewModel = 0x2A8; // rodViewModel
		inline constexpr ::std::ptrdiff_t spawnedPreview = 0x2B0; // spawnedPreview
		inline constexpr ::std::ptrdiff_t aimAnimationReady = 0x2B8; // aimAnimationReady
		inline constexpr ::std::ptrdiff_t onLineSound = 0x2C0; // onLineSound
		inline constexpr ::std::ptrdiff_t strainSound = 0x2C8; // strainSound
		inline constexpr ::std::ptrdiff_t strainGainMod = 0x2D0; // strainGainMod
		inline constexpr ::std::ptrdiff_t consumingBackMovement = 0x2D8; // consumingBackMovement
		inline constexpr ::std::ptrdiff_t reelInAnimTimer = 0x2DC; // reelInAnimTimer
	} // BaseFishingRod
	namespace FishingBobber {
		inline constexpr ::std::ptrdiff_t centerOfMass = 0x290; // centerOfMass
		inline constexpr ::std::ptrdiff_t myRigidBody = 0x298; // myRigidBody
		inline constexpr ::std::ptrdiff_t lineAttachPoint = 0x2A0; // lineAttachPoint
		inline constexpr ::std::ptrdiff_t bobberRoot = 0x2A8; // bobberRoot
		inline constexpr ::std::ptrdiff_t HorizontalMoveSpeed = 0x2B0; // HorizontalMoveSpeed
		inline constexpr ::std::ptrdiff_t PullAwayMoveSpeed = 0x2B4; // PullAwayMoveSpeed
		inline constexpr ::std::ptrdiff_t SidewaysInputForce = 0x2B8; // SidewaysInputForce
		inline constexpr ::std::ptrdiff_t ReelInMoveSpeed = 0x2BC; // ReelInMoveSpeed
		inline constexpr ::std::ptrdiff_t fishLerp = 0x2C0; // fishLerp
		inline constexpr ::std::ptrdiff_t lastPosition = 0x2C4; // lastPosition
	} // FishingBobber
	namespace OcclusionCulling {
		inline constexpr ::std::ptrdiff_t computeShader = 0x20; // computeShader
		inline constexpr ::std::ptrdiff_t usePixelShaderFallback = 0x28; // usePixelShaderFallback
		inline constexpr ::std::ptrdiff_t useAsyncReadAPI = 0x29; // useAsyncReadAPI
		inline constexpr ::std::ptrdiff_t camera = 0x30; // camera
		inline constexpr ::std::ptrdiff_t staticSet = 0x58; // staticSet
		inline constexpr ::std::ptrdiff_t dynamicSet = 0x60; // dynamicSet
		inline constexpr ::std::ptrdiff_t gridSet = 0x68; // gridSet
		inline constexpr ::std::ptrdiff_t frustumPlanes = 0x38; // frustumPlanes
		inline constexpr ::std::ptrdiff_t frustumPropNames = 0x40; // frustumPropNames
		inline constexpr ::std::ptrdiff_t matrixToFloatTemp = 0x48; // matrixToFloatTemp
		inline constexpr ::std::ptrdiff_t fallbackMat = 0x50; // fallbackMat
		inline constexpr ::std::ptrdiff_t depthCopyMat = 0x58; // depthCopyMat
		inline constexpr ::std::ptrdiff_t viewMatrix = 0x60; // viewMatrix
		inline constexpr ::std::ptrdiff_t projMatrix = 0xA0; // projMatrix
		inline constexpr ::std::ptrdiff_t viewProjMatrix = 0xE0; // viewProjMatrix
		inline constexpr ::std::ptrdiff_t prevViewProjMatrix = 0x120; // prevViewProjMatrix
		inline constexpr ::std::ptrdiff_t invViewProjMatrix = 0x160; // invViewProjMatrix
		inline constexpr ::std::ptrdiff_t useNativePath = 0x1A0; // useNativePath
		inline constexpr ::std::ptrdiff_t instance = 0x70; // instance
		inline constexpr ::std::ptrdiff_t Passthrough = 0x78; // Passthrough
		inline constexpr ::std::ptrdiff_t _enabled = 0x88; // _enabled
		inline constexpr ::std::ptrdiff_t _safeMode = 0x89; // _safeMode
		inline constexpr ::std::ptrdiff_t _debugShow = 0x8C; // _debugShow
		inline constexpr ::std::ptrdiff_t debugSettings = 0x1A8; // debugSettings
		inline constexpr ::std::ptrdiff_t debugMipMat = 0x1B0; // debugMipMat
		inline constexpr ::std::ptrdiff_t downscaleMat = 0x1B8; // downscaleMat
		inline constexpr ::std::ptrdiff_t blitCopyMat = 0x1C0; // blitCopyMat
		inline constexpr ::std::ptrdiff_t hiZLevelCount = 0x1C8; // hiZLevelCount
		inline constexpr ::std::ptrdiff_t hiZWidth = 0x1CC; // hiZWidth
		inline constexpr ::std::ptrdiff_t hiZHeight = 0x1D0; // hiZHeight
		inline constexpr ::std::ptrdiff_t depthTexture = 0x1D8; // depthTexture
		inline constexpr ::std::ptrdiff_t hiZTexture = 0x1E0; // hiZTexture
		inline constexpr ::std::ptrdiff_t hiZLevels = 0x1E8; // hiZLevels
	} // OcclusionCulling
	namespace OcclusionCulling_DebugSettings {
		inline constexpr ::std::ptrdiff_t log = 0x10; // log
		inline constexpr ::std::ptrdiff_t showAllVisible = 0x11; // showAllVisible
		inline constexpr ::std::ptrdiff_t showMipChain = 0x12; // showMipChain
		inline constexpr ::std::ptrdiff_t showMain = 0x13; // showMain
		inline constexpr ::std::ptrdiff_t showMainLod = 0x14; // showMainLod
		inline constexpr ::std::ptrdiff_t showFallback = 0x18; // showFallback
		inline constexpr ::std::ptrdiff_t showStats = 0x19; // showStats
		inline constexpr ::std::ptrdiff_t showScreenBounds = 0x1A; // showScreenBounds
		inline constexpr ::std::ptrdiff_t showMask = 0x1C; // showMask
		inline constexpr ::std::ptrdiff_t layerFilter = 0x20; // layerFilter
	} // OcclusionCulling_DebugSettings
}